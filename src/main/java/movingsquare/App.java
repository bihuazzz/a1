/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package movingsquare;

import movingsquare.squares.*;
import processing.core.PApplet;
import processing.core.PImage;

import java.nio.channels.Pipe;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;

public class App extends PApplet {

    List<Invader> invaders;
    ArrayList<Projectile> projectiles;
    int cur_score;
    int Highest_score;
    Tank tank;
    Tank tank1;
    Invader invader;
    PImage[] left_barrier;
    PImage[] right_barrier;
    PImage[] solid_barrier;
    PImage[] top_barrier;
    PImage[] normal_inva;
    PImage[] high_blood_inva;
    PImage[] high_attack_inva;
    PImage result_img2;
    PImage result_img;
    int frame_cal;
    int level_Score;
    ArrayList<Barrierpart> barrierparts;
    double freq_fire;
    ArrayList<PImage[]> barrierimg;
    int barrier_height = 480-26-24;
    int horiflag;

    public App() {
        invaders = new ArrayList<>();
        barrierparts = new ArrayList<>();

        barrierimg = new ArrayList<>();
        projectiles = new ArrayList<>();
        freq_fire =6;
        Highest_score = 10000;
        cur_score = 0;

    }
    
    public void settings() {
        size(640, 480);
    }

    @Override
    public void keyReleased(){
//        System.out.println("keyrelased:   "+keyCode);
        if(keyCode ==32&& tank!=null ){
            int[] tank_location = tank.getlocation();
            Projectile bullet = new Projectile(loadImage("projectile.png"),tank_location[0]+11 , tank_location[1]- 4, 1, 3,1, new int[] {0, 1});
            bullet.setDir(-1);


            projectiles.add(bullet);
        }else if (keyCode == UP){
            level_Score = 7000;
            System.out.println(level_Score);
        }

    }

    public void setup() {

        System.out.println("setup");
        System.out.println(freq_fire);
        this.freq_fire -= 1;

        result_img2 = loadImage("nextlevel.png");  // Load the image into the program
        result_img = loadImage("gameover.png");  // Load the image into the program
//        tank1 = new Tank(result_img,170,200,300,80, new int[]{0,0}) ;

        level_Score = 0;

        frameRate(60);
        horiflag = 1;
        left_barrier = new PImage[]{loadImage("barrier_left1.png"),loadImage("barrier_left2.png"),loadImage("barrier_left3.png"),loadImage("empty.png")};
        right_barrier = new PImage[]{loadImage("barrier_right1.png"),loadImage("barrier_right2.png"),loadImage("barrier_right3.png"),loadImage("empty.png")};
        solid_barrier = new PImage[]{loadImage("barrier_solid1.png"),loadImage("barrier_solid2.png"),loadImage("barrier_solid3.png"),loadImage("empty.png")};
        top_barrier = new PImage[]{loadImage("barrier_top1.png"),loadImage("barrier_top2.png"),loadImage("barrier_top3.png"),loadImage("empty.png")};
        barrierimg.add(left_barrier);
        barrierimg.add(right_barrier);
        barrierimg.add(solid_barrier);
        barrierimg.add(top_barrier);

        normal_inva = new PImage[]{loadImage("invader1.png"),loadImage("invader2.png")};
        high_attack_inva = new PImage[]{loadImage("invader1_power.png"),loadImage("invader2_power.png")};
        high_blood_inva = new PImage[]{loadImage("invader1_armoured.png"),loadImage("invader2_armoured.png")};

        for (int i = 153; i < 442;i = i+32){

            for(int y = 100; y < 197; y = y+32 ) {
                if(y == 100){
                    // type---- normal : 0; high attacked 1; high blood 2;
                    //high blood
                    invaders.add(new Invader(high_blood_inva, i, y, 16, 16,3,1,2,new int[]{1, 1}));
                }else if(y == 132){
                    invaders.add(new Invader(high_attack_inva, i, y, 16, 16,1,3,1,new int[]{1, 1}));


                }else {
                    invaders.add(new Invader(normal_inva, i, y, 16, 16,1,1,0,new int[]{1, 1}));

                }
            }
        }

        tank = new Tank(loadImage("tank1.png"), 309, 464, 22, 16, new int[] {2, 1});


//        tank1 = new Tank(loadImage("tank1.png"),invaders.get(0).getLocation()[0],invaders.get(0).getLocation()[1],16,16,new int[]{0, 0});

        for(int num_X =200;num_X<420;num_X = num_X+108){

            int[][] x_ys = new int[][]{{num_X,barrier_height,0},{num_X+8,barrier_height,3},{num_X+16,barrier_height,1},
                                                                {num_X,barrier_height+8,2},{num_X+16,barrier_height+8,2},
                                                                {num_X,barrier_height+16,2},{num_X+16,barrier_height+16,2}
                                        };




            for(int[] x_y: x_ys){
                barrierparts.add(new Barrierpart(barrierimg.get(x_y[2]), x_y[0], x_y[1], 8, 8, new int[]{0, 0}));

            }
//            System.out.println(barrierparts.size());
        }

        frame_cal = (int) Integer.parseInt(String.valueOf(frameCount));

    }







    
    public void draw() {


//        System.out.println("new frame :" +frameCount);

        background(0);
        textSize(18);
        text("Current score: "+this.cur_score, 10, 30);
        text("Highest score: " + this.Highest_score, 440, 30);
        text("Level " + (6-this.freq_fire), 200, 30);

        if(tank!=null){
            text("Current HP: " + (int)(3-tank.getDamage_accout()), 10, 70);

        }else {
            text("Current HP: 0 " , 10, 70);

        }



        if(level_Score == 7000 ){
            if(freq_fire>1){
            projectiles.clear();
            barrierparts.clear();
            invaders.clear();
            tank = null;
            System.out.println("---------------------------------------------------");
            System.out.println(freq_fire);
            int previous  = millis();



            image(result_img2, 170, 200, 300, 80);
//            System.out.println(result_img);

            textSize(22);
            text("Press ENTER to go to the next level.", 180, 400);
                if (keyPressed && key==ENTER){
                    setup();
                    redraw();
                }


        }else {
                if(cur_score > Highest_score ){
                    Highest_score = cur_score;
                }
                cur_score =0;
                projectiles.clear();
                barrierparts.clear();
                invaders.clear();
                tank = null;

                image(result_img, 170, 200, 300, 80);
                System.out.println(result_img);

                textSize(22);
                text("Press ENTER to replay the game.", 180, 400);
                if (keyPressed && key==ENTER){
                    freq_fire = 6;
                    setup();
                    redraw();
                }
            }
        }else {
            if (tank != null && tank.islive()) {
                tank.draw(this);
            } else {

                System.out.println("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
                System.out.println(freq_fire);

                size(640, 480);

                if (cur_score > Highest_score) {
                    Highest_score = cur_score;
                }
                cur_score = 0;
                projectiles.clear();
                barrierparts.clear();
                invaders.clear();
                tank = null;
                result_img = loadImage("gameover.png");  // Load the image into the program
                image(result_img, 170, 200, 300, 80);
                System.out.println(result_img);

                textSize(22);
                text("Press ENTER to replay the game.", 180, 400);
                System.out.println("zoudaozheyibule");

                delay(1000);
                if (keyPressed && key == ENTER) {
                    freq_fire = 5;
                    setup();
                    redraw();
                }
            }




            int move_flag = 0;
            if (keyPressed && tank != null) {
                if(keyCode == LEFT ){
                    move_flag = -1;
                }else if( keyCode == RIGHT){
                    move_flag = 1;
                }


                tank.move(move_flag);
                move_flag = 0;
            }



            if ((frameCount-frame_cal) % 68 == 0 && (frameCount-frame_cal)!=0) {
                horiflag = horiflag * (-1);
            }

            int i_length = (int) invaders.size();

            int counter = 0;

            while (counter<i_length){

                if (!invaders.get(counter).isAlive()) {
                    int type = invaders.get(counter).getType();

                    if(type == 0){
                        cur_score += 100;
                        level_Score += 100;
                    }else{
                        cur_score += 250;
                        level_Score += 250;
                    }

                    invaders.remove(counter);
                    i_length--;
                }else {
                    counter ++ ;
                }
            }


            int randomsize = invaders.size();

            if((frameCount-frame_cal)%((int)(freq_fire)*60) == 0 && randomsize!=0){
                int chooesdindex = (int)((Math.random())*randomsize);

                int[] ilocation = invaders.get(chooesdindex).getLocation();
                int damage = invaders.get(chooesdindex).getDamage();
                Projectile bullet;
                if (damage >1){
                    bullet = new Projectile(loadImage("projectile.png"),ilocation[0]+8 , ilocation[1]+21, 2, 5, 3,new int[] {0, 1});
                }else {
                    bullet = new Projectile(loadImage("projectile.png"),ilocation[0]+8 , ilocation[1]+19, 1, 3, 1,new int[] {0, 1});

                }
                bullet.setDir(1);
                projectiles.add(bullet);
            }


            for(Invader invader: invaders){
                invader.setImgindex(0);

                if (invader.getY()>480){

                    invader = null;

                }else {

                    if((frameCount-frame_cal)%68 > 60){
                        invader.automove(0,1);
                        invader.setImgindex(1);
                    }



                    if((frameCount-frame_cal)%2 ==0){
                        invader.automove(horiflag,0);
                    }

                    invader.draw(this);
                }

                int[] i_location = invader.getLocation();

                for(Barrierpart b: barrierparts){
                    int[] b_location = b.getLocation();
                    if ((i_location[0]+16>= b_location[0]) && (i_location[0] <= b_location[0] + 8) && (i_location[1] + 26 >= b_location[1])) {
                        tank.setDamage_accout(3);
                    }


                }
                if(tank!=null){
                    int[] t_location = tank.getlocation();

                    if ((i_location[0]+16>= t_location[0]) && (i_location[0] <= t_location[0] + 8) && (i_location[1] + 16 >= t_location[1])) {
                        tank.setDamage_accout(3);
                    }

                }




            }


            for (Barrierpart b: barrierparts){
                b.draw(this);
            }


            int b_length = (int) barrierparts.size();

            counter = 0;

            while (counter<b_length){

                if (barrierparts.get(counter).getDamage_count() >2) {
//                System.out.println(barrierparts.get(counter).getDamage_count());
                    barrierparts.remove(counter);
                    b_length--;
                }else {
                    counter ++ ;
                }
            }






            for(Projectile p : projectiles){
                p.move();
                p.draw(this);
            }



            int p_length = (int) projectiles.size();

            counter = 0;

            while (counter<p_length && tank != null){


                Projectile p = projectiles.get(counter);
                int damage_p = p.getDamage();

                if(p.getLocation()[1] < -10 || p.getLocation()[1]>480){
                    projectiles.remove(counter);
                    p_length --;

                }else {
//                System.out.println("this bullet is from tank");

                    boolean ischange = false;

                    boolean isfromtank = p.isfromtank();
                    int[] p_location = p.getLocation();


                    loop: for(Barrierpart b: barrierparts){
                        int[] b_location = b.getLocation();



                        if(isfromtank) {
                            if ((p_location[0] >= b_location[0]) && (p_location[0] <= b_location[0] + 8) && (p_location[1]  <= b_location[1] + 8)) {

                                b.setDamage_count(1);
                                projectiles.remove(counter);
                                ischange = true;



                                break loop;

                            }
                        }else {


                            if (damage_p <2){
                                if ((p_location[0] >= b_location[0]) && (p_location[0] <= b_location[0] + 8) && (p_location[1] + 3 >= b_location[1])) {
                                    b.setDamage_count(damage_p);
                                    projectiles.remove(counter);
                                    ischange = true;

//                            System.out.println(b.getDamage_count());
                                    break loop;

                                }
                            }else if ((p_location[0] >= b_location[0]) && (p_location[0] <= b_location[0] + 8) && (p_location[1] + 5 >= b_location[1])){
                                b.setDamage_count(damage_p);
                                projectiles.remove(counter);
                                ischange = true;

//                            System.out.println(b.getDamage_count());
                                break loop;
                            }



                        }

                    }

                    if(ischange){

                    }else {
                        loop2: for(Invader i: invaders){
                            int[] i_location = i.getLocation();
                            //If the bullet is not from tank, invadars don't be influenced.
                            if(isfromtank) {
                                if ((p_location[0] >= i_location[0]) && (p_location[0] <= i_location[0] + 8) && (p_location[1]  <= i_location[1] + 16)) {

                                    projectiles.remove(counter);
                                    ischange = true;
                                    i.getattacked();

                                    break loop2;

                                }
                            }else {
                                //If the bullet is not from tank, invadars don't be influenced.

                            }

                        }

                    }

                    if(ischange){

                    }else {
                        int[] t_location = tank.getlocation();


                        if (damage_p <2){

                            if ((p_location[0] >= t_location[0]) && (p_location[0] <= t_location[0] + 22) && (p_location[1] + 3 >= t_location[1])) {
                                tank.setDamage_accout(p.getDamage());
                                projectiles.remove(counter);
                                ischange = true;
                            }
                        }else if ((p_location[0] >= t_location[0]) && (p_location[0] <= t_location[0] + 22) && (p_location[1] + 5 >= t_location[1])){
                            tank.setDamage_accout(p.getDamage());
                            projectiles.remove(counter);
                            ischange = true;
                        }


                    }





                    if(ischange){
                        p_length --;

                    }else {
                        counter ++;
                    }


                }
            }

        }


//        System.out.println(freq_fire);






    }
    
    public static void main(String[] args) {

        PApplet.main("movingsquare.App");
    }
}
